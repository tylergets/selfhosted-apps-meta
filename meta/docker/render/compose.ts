import {App} from "~/meta/interfaces/interfaces";
import {Document} from "yaml";
import {watchEffect, isRef, unref, ref} from "vue";
import {useAppStore} from "~/stores/app";

export function useDockerComposeTemplate(app: App, comments: boolean = true) {

    const yaml = ref<any>(null);

    const store = useAppStore();

    function renderTemplate() {
        app = unref(app);

        const root = new Document({
            version: "3.8",
        });
        if (store.comments) {
            root.commentBefore = app.name + ' - Generated by SH-Apps-Meta';
        }

        for(const container of app.containers) {
            const service = new Document({
                [container.name]: {
                    image: container.image,
                    container_name: app.id !== container.name ? `${app.id}-${container.name}` : container.name,
                    restart: 'unless-stopped',
                },
            });

            if((container.ports?.length ?? []) > 0) {
                service.addIn([container.name, 'ports'], new Document([]));
                for (const port of container.ports ?? []) {
                    const node = service.createNode(`${port.container}:${port.container}`);
                    if (store.comments && port.description) {
                        if (port.web) {
                            node.commentBefore = ` ${port.description} (Web)`;
                        } else {
                            node.commentBefore = ` ${port.description}`;
                        }
                    }
                    service.addIn([container.name, 'ports'], node);
                }

            }

            if((container.volumes?.length ?? []) > 0) {
                service.addIn([container.name, 'volumes'], new Document([]));
                for (const volume of container.volumes ?? []) {
                    const node = service.createNode(`< /path/to/your${volume.container}>:${volume.container}`);
                    if (store.comments && volume.description) {
                        node.commentBefore = ` ${volume.description}`;
                    }
                    service.addIn([container.name, 'volumes'], node);
                }
            }

            if((container.env?.length ?? []) > 0) {
                service.addIn([container.name, 'environment'], new Document([]));
                for (const env of container.env ?? []) {
                    const node = service.createNode(`${env.id}=${env.default ?? 'YOUR-VALUE-HERE'}`);
                    if (store.comments && env.description) {
                        node.commentBefore = ` ${env.description}`;
                    }
                    service.addIn([container.name, 'environment'], node);
                }
            }

            root.addIn(['services'], service);
        }

        yaml.value = root.toString({
            commentString: comment => `# ${comment}`,
            indent: 2,
        });
    }

    if (isRef(app)) {
        watchEffect(renderTemplate)
    } else {
        renderTemplate()
    }

    return {
        yaml
    }
}