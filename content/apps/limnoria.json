{
    "id": "limnoria",
    "name": "limnoria",
    "description": "[{{ project_name|capitalize }}]({{ project_url }}) A robust, full-featured, and user/programmer-friendly Python IRC bot, with many existing plugins. Successor of the well-known Supybot.",
    "icon": "https://raw.githubusercontent.com/linuxserver/docker-limnoria/master/logo.png",
    "links": [
        {
            "type": "docker",
            "url": "https://hub.docker.com/r/linuxserver/limnoria"
        },
        {
            "type": "docs",
            "url": "https://docs.linuxserver.io/images/docker-limnoria"
        }
    ],
    "containers": [
        {
            "name": "limnoria",
            "image": "linuxserver/limnoria",
            "env": [
                {
                    "id": "PUID",
                    "key": "PUID",
                    "description": "User ID",
                    "default": "100"
                },
                {
                    "id": "PGID",
                    "key": "PGID",
                    "description": "Group ID",
                    "default": "100"
                },
                {
                    "id": "TZ",
                    "default": "Europe/London",
                    "description": "Specify a timezone to use EG Europe/London."
                }
            ],
            "volumes": [
                {
                    "container": "/config",
                    "description": "Where Limnoria config is stored.",
                    "key": "config"
                }
            ],
            "ports": [
                {
                    "container": "8080",
                    "description": "Port for Limnoria's web interface.",
                    "protocol": "tcp",
                    "web": false
                }
            ]
        }
    ],
    "meta": {
        "readme-vars": {
            "project_name": "limnoria",
            "project_url": "https://github.com/ProgVal/limnoria",
            "project_logo": "https://raw.githubusercontent.com/linuxserver/docker-limnoria/master/logo.png",
            "project_blurb": "[{{ project_name|capitalize }}]({{ project_url }}) A robust, full-featured, and user/programmer-friendly Python IRC bot, with many existing plugins. Successor of the well-known Supybot.",
            "project_lsio_github_repo_url": "https://github.com/linuxserver/docker-{{ project_name }}",
            "project_blurb_optional_extras_enabled": false,
            "project_blurb_optional_extras": [],
            "available_architectures": [
                {
                    "arch": "{{ arch_x86_64 }}",
                    "tag": "amd64-latest"
                },
                {
                    "arch": "{{ arch_arm64 }}",
                    "tag": "arm64v8-latest"
                },
                {
                    "arch": "{{ arch_armhf }}",
                    "tag": "arm32v7-latest"
                }
            ],
            "development_versions": false,
            "development_versions_items": null,
            "common_param_env_vars_enabled": true,
            "param_container_name": "{{ project_name }}",
            "param_usage_include_net": false,
            "param_usage_include_env": true,
            "param_env_vars": [
                {
                    "env_var": "TZ",
                    "env_value": "Europe/London",
                    "desc": "Specify a timezone to use EG Europe/London."
                }
            ],
            "param_usage_include_vols": true,
            "param_volumes": [
                {
                    "vol_path": "/config",
                    "vol_host_path": "path/to/config",
                    "desc": "Where Limnoria config is stored."
                }
            ],
            "param_usage_include_ports": true,
            "param_ports": [
                {
                    "external_port": "8080",
                    "internal_port": "8080",
                    "port_desc": "Port for Limnoria's web interface."
                }
            ],
            "opt_param_usage_include_env": false,
            "opt_param_env_vars": null,
            "opt_param_usage_include_vols": false,
            "opt_param_volumes": null,
            "opt_param_usage_include_ports": false,
            "opt_param_ports": null,
            "opt_param_device_map": false,
            "opt_param_devices": null,
            "opt_cap_add_param": false,
            "opt_cap_add_param_vars": null,
            "optional_block_1": false,
            "optional_block_1_items": "",
            "app_setup_block_enabled": true,
            "app_setup_block": "### New Configuration\n\nIf you do not have an existing config you will need to start the container and then run the following wizard command:\n\n`docker exec -it -w /config -u abc limnoria limnoria-wizard`\n\n### Existing Configuration\n\nIf you have an existing config, adjust the directory settings in your conf file as follows:\n\n```conf\nsupybot.directories.backup: /config/backup\nsupybot.directories.conf: /config/conf\nsupybot.directories.data: /config/data\nsupybot.directories.data.tmp: /config/data/tmp\nsupybot.directories.data.web: /config/web\nsupybot.directories.log: /config/logs\nsupybot.directories.plugins: /config/plugins\n```\n\nNOTE: These are not grouped together in the file. You will need to search your conf file for the variables.\n\nThen place your conf file and any of your existing directories in /config and start up the container.\n\n### Plugin Requirements\n\nThe container will pip install any requirements.txt it finds in the /config/plugins folder on startup.\n\nIf you install a plugin using the PluginDownloader that includes a requirements.txt you can \nexecute a shell into the container and then use `pip install /config/plugins/ThePlugin/requirements.txt`\nor restart the container and the requirements will be installed. \n",
            "changelogs": [
                {
                    "date": "22.12.22:",
                    "desc": "Rebase to alpine 3.17."
                },
                {
                    "date": "19.09.22:",
                    "desc": "Rebase to alpine 3.15."
                },
                {
                    "date": "25.05.21:",
                    "desc": "Install plugin requirements on container init."
                },
                {
                    "date": "17.05.21:",
                    "desc": "Add linuxserver wheel index."
                },
                {
                    "date": "13.02.21:",
                    "desc": "Rebasing to alpine 3.13."
                },
                {
                    "date": "01.06.20:",
                    "desc": "Rebasing to alpine 3.12."
                },
                {
                    "date": "13.01.20:",
                    "desc": "Initial Release."
                }
            ]
        }
    },
    "setup": "### New Configuration\n\nIf you do not have an existing config you will need to start the container and then run the following wizard command:\n\n`docker exec -it -w /config -u abc limnoria limnoria-wizard`\n\n### Existing Configuration\n\nIf you have an existing config, adjust the directory settings in your conf file as follows:\n\n```conf\nsupybot.directories.backup: /config/backup\nsupybot.directories.conf: /config/conf\nsupybot.directories.data: /config/data\nsupybot.directories.data.tmp: /config/data/tmp\nsupybot.directories.data.web: /config/web\nsupybot.directories.log: /config/logs\nsupybot.directories.plugins: /config/plugins\n```\n\nNOTE: These are not grouped together in the file. You will need to search your conf file for the variables.\n\nThen place your conf file and any of your existing directories in /config and start up the container.\n\n### Plugin Requirements\n\nThe container will pip install any requirements.txt it finds in the /config/plugins folder on startup.\n\nIf you install a plugin using the PluginDownloader that includes a requirements.txt you can \nexecute a shell into the container and then use `pip install /config/plugins/ThePlugin/requirements.txt`\nor restart the container and the requirements will be installed. \n"
}