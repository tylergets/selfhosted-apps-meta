{"version":3,"file":"index.a6ef77ff.js","sources":["../../../../node_modules/scule/dist/index.mjs"],"sourcesContent":["const NUMBER_CHAR_RE = /\\d/;\nconst STR_SPLITTERS = [\"-\", \"_\", \"/\", \".\"];\nfunction isUppercase(char = \"\") {\n  if (NUMBER_CHAR_RE.test(char)) {\n    return void 0;\n  }\n  return char.toUpperCase() === char;\n}\nfunction splitByCase(string_, separators) {\n  const splitters = separators ?? STR_SPLITTERS;\n  const parts = [];\n  if (!string_ || typeof string_ !== \"string\") {\n    return parts;\n  }\n  let buff = \"\";\n  let previousUpper;\n  let previousSplitter;\n  for (const char of string_) {\n    const isSplitter = splitters.includes(char);\n    if (isSplitter === true) {\n      parts.push(buff);\n      buff = \"\";\n      previousUpper = void 0;\n      continue;\n    }\n    const isUpper = isUppercase(char);\n    if (previousSplitter === false) {\n      if (previousUpper === false && isUpper === true) {\n        parts.push(buff);\n        buff = char;\n        previousUpper = isUpper;\n        continue;\n      }\n      if (previousUpper === true && isUpper === false && buff.length > 1) {\n        const lastChar = buff[buff.length - 1];\n        parts.push(buff.slice(0, Math.max(0, buff.length - 1)));\n        buff = lastChar + char;\n        previousUpper = isUpper;\n        continue;\n      }\n    }\n    buff += char;\n    previousUpper = isUpper;\n    previousSplitter = isSplitter;\n  }\n  parts.push(buff);\n  return parts;\n}\nfunction upperFirst(string_) {\n  return !string_ ? \"\" : string_[0].toUpperCase() + string_.slice(1);\n}\nfunction lowerFirst(string_) {\n  return !string_ ? \"\" : string_[0].toLowerCase() + string_.slice(1);\n}\nfunction pascalCase(string_) {\n  return !string_ ? \"\" : (Array.isArray(string_) ? string_ : splitByCase(string_)).map((p) => upperFirst(p)).join(\"\");\n}\nfunction camelCase(string_) {\n  return lowerFirst(pascalCase(string_));\n}\nfunction kebabCase(string_, joiner) {\n  return !string_ ? \"\" : (Array.isArray(string_) ? string_ : splitByCase(string_)).map((p) => p.toLowerCase()).join(joiner ?? \"-\");\n}\nfunction snakeCase(string_) {\n  return kebabCase(string_, \"_\");\n}\n\nexport { camelCase, isUppercase, kebabCase, lowerFirst, pascalCase, snakeCase, splitByCase, upperFirst };\n"],"names":["NUMBER_CHAR_RE","STR_SPLITTERS","isUppercase","char","splitByCase","string_","separators","splitters","parts","buff","previousUpper","previousSplitter","isSplitter","isUpper","lastChar","upperFirst","pascalCase","p"],"mappings":"AAAA,MAAMA,EAAiB,KACjBC,EAAgB,CAAC,IAAK,IAAK,IAAK,GAAG,EACzC,SAASC,EAAYC,EAAO,GAAI,CAC9B,GAAI,CAAAH,EAAe,KAAKG,CAAI,EAG5B,OAAOA,EAAK,YAAa,IAAKA,CAChC,CACA,SAASC,EAAYC,EAASC,EAAY,CACxC,MAAMC,EAAYD,GAAcL,EAC1BO,EAAQ,CAAA,EACd,GAAI,CAACH,GAAW,OAAOA,GAAY,SACjC,OAAOG,EAET,IAAIC,EAAO,GACPC,EACAC,EACJ,UAAWR,KAAQE,EAAS,CAC1B,MAAMO,EAAaL,EAAU,SAASJ,CAAI,EAC1C,GAAIS,IAAe,GAAM,CACvBJ,EAAM,KAAKC,CAAI,EACfA,EAAO,GACPC,EAAgB,OAChB,QACD,CACD,MAAMG,EAAUX,EAAYC,CAAI,EAChC,GAAIQ,IAAqB,GAAO,CAC9B,GAAID,IAAkB,IAASG,IAAY,GAAM,CAC/CL,EAAM,KAAKC,CAAI,EACfA,EAAON,EACPO,EAAgBG,EAChB,QACD,CACD,GAAIH,IAAkB,IAAQG,IAAY,IAASJ,EAAK,OAAS,EAAG,CAClE,MAAMK,EAAWL,EAAKA,EAAK,OAAS,CAAC,EACrCD,EAAM,KAAKC,EAAK,MAAM,EAAG,KAAK,IAAI,EAAGA,EAAK,OAAS,CAAC,CAAC,CAAC,EACtDA,EAAOK,EAAWX,EAClBO,EAAgBG,EAChB,QACD,CACF,CACDJ,GAAQN,EACRO,EAAgBG,EAChBF,EAAmBC,CACpB,CACD,OAAAJ,EAAM,KAAKC,CAAI,EACRD,CACT,CACA,SAASO,EAAWV,EAAS,CAC3B,OAAQA,EAAeA,EAAQ,CAAC,EAAE,YAAW,EAAKA,EAAQ,MAAM,CAAC,EAA/C,EACpB,CAIA,SAASW,EAAWX,EAAS,CAC3B,OAAQA,GAAgB,MAAM,QAAQA,CAAO,EAAIA,EAAUD,EAAYC,CAAO,GAAG,IAAKY,GAAMF,EAAWE,CAAC,CAAC,EAAE,KAAK,EAAE,EAAhG,EACpB"}