{"version":3,"file":"ContentQuery.7ccbef00.js","sources":["../../../../node_modules/@nuxt/content/dist/runtime/components/ContentQuery.vue"],"sourcesContent":["<script>\nimport { hash } from \"ohash\";\nimport { toRefs, defineComponent, h, useSlots, watch } from \"vue\";\nimport { computed, useAsyncData, queryContent } from \"#imports\";\nexport default defineComponent({\n  name: \"ContentQuery\",\n  props: {\n    /**\n     * The path of the content to load from content source.\n     */\n    path: {\n      type: String,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Select a subset of fields\n     */\n    only: {\n      type: Array,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Remove a subset of fields\n     */\n    without: {\n      type: Array,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Filter results\n     */\n    where: {\n      type: Object,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Sort results\n     */\n    sort: {\n      type: Object,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Limit number of results\n     */\n    limit: {\n      type: Number,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Skip number of results\n     */\n    skip: {\n      type: Number,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Filter contents based on locale\n     */\n    locale: {\n      type: String,\n      required: false,\n      default: void 0\n    },\n    /**\n     * A type of query to be made.\n     */\n    find: {\n      type: String,\n      required: false,\n      default: void 0\n    }\n  },\n  async setup(props) {\n    const {\n      path,\n      only,\n      without,\n      where,\n      sort,\n      limit,\n      skip,\n      locale,\n      find\n    } = toRefs(props);\n    const isPartial = computed(() => path.value?.includes(\"/_\"));\n    watch(() => props, () => refresh(), { deep: true });\n    const { data, refresh } = await useAsyncData(\n      `content-query-${hash(props)}`,\n      () => {\n        let queryBuilder;\n        if (path.value) {\n          queryBuilder = queryContent(path.value);\n        } else {\n          queryBuilder = queryContent();\n        }\n        if (only.value) {\n          queryBuilder = queryBuilder.only(only.value);\n        }\n        if (without.value) {\n          queryBuilder = queryBuilder.without(without.value);\n        }\n        if (where.value) {\n          queryBuilder = queryBuilder.where(where.value);\n        }\n        if (sort.value) {\n          queryBuilder = queryBuilder.sort(sort.value);\n        }\n        if (limit.value) {\n          queryBuilder = queryBuilder.limit(limit.value);\n        }\n        if (skip.value) {\n          queryBuilder = queryBuilder.skip(skip.value);\n        }\n        if (locale.value) {\n          queryBuilder = queryBuilder.where({ _locale: locale.value });\n        }\n        if (find.value === \"one\") {\n          return queryBuilder.findOne();\n        }\n        if (find.value === \"surround\") {\n          if (!path.value) {\n            console.warn(\"[Content] Surround queries requires `path` prop to be set.\");\n            console.warn(\"[Content] Query without `path` will return regular `find()` results.\");\n            return queryBuilder.find();\n          }\n          return queryBuilder.findSurround(path.value);\n        }\n        return queryBuilder.find();\n      }\n    );\n    return {\n      isPartial,\n      data,\n      refresh\n    };\n  },\n  /**\n   * Content not found fallback\n   * @slot not-found\n   */\n  render(ctx) {\n    const slots = useSlots();\n    const {\n      // Setup\n      data,\n      refresh,\n      isPartial,\n      // Props\n      path,\n      only,\n      without,\n      where,\n      sort,\n      limit,\n      skip,\n      locale,\n      find\n    } = ctx;\n    const props = {\n      path,\n      only,\n      without,\n      where,\n      sort,\n      limit,\n      skip,\n      locale,\n      find\n    };\n    if (props.find === \"one\") {\n      if (!data && slots?.[\"not-found\"]) {\n        return slots[\"not-found\"]({ props, ...this.$attrs });\n      }\n      if (slots?.empty && data?._type === \"markdown\" && !data?.body?.children.length) {\n        return slots.empty({ props, ...this.$attrs });\n      }\n    } else if (!data || !data.length) {\n      if (slots?.[\"not-found\"]) {\n        return slots[\"not-found\"]({ props, ...this.$attrs });\n      }\n    }\n    if (slots?.default) {\n      return slots.default({ data, refresh, isPartial, props, ...this.$attrs });\n    }\n    const emptyNode = (slot, data2) => h(\"pre\", null, JSON.stringify({ message: \"You should use slots with <ContentQuery>!\", slot, data: data2 }, null, 2));\n    return emptyNode(\"default\", { data, props, isPartial });\n  }\n});\n</script>\n"],"names":["_sfc_main","defineComponent","props","without","locale","find","toRefs","watch","refresh","data","useAsyncData","hash","queryBuilder","path","queryContent","only","where","sort","limit","skip","isPartial","slots","useSlots","_a","slot","data2","h"],"mappings":"wPAIA,MAAAA,EAAAC,EAAA,CACE,KAAA,eACA,MAAA,mBAMI,SAAA,oCAQA,SAAA,mBAMF,QAAA,YAEE,SAAA,mBAMF,MAAA,aAEE,SAAA,qCAQA,SAAA,mBAMF,MAAA,aAEE,SAAA,qCAQA,SAAA,mBAMF,OAAA,aAEE,SAAA,qCAQA,SAAA,iBAEF,GAEF,MAAA,MAAAC,EAAA,qBAII,QAAAC,gCAKA,OAAAC,EACA,KAAAC,CACF,EAAAC,EAAAJ,CAAA,mEAEAK,EAAA,IAAAL,EAAA,IAAAM,EAAA,EAAA,CAAA,KAAA,EAAA,CAAA,EACA,KAAA,CAAA,KAAAC,EAAA,QAAAD,CAAA,EAAA,MAAAE,EACE,iBAAAC,EAAAT,CAAA,SAEE,IAAAU,SACAC,EAAA,MACED,EAAAE,EAAAD,EAAA,KAAA,QAIFE,EAAA,QACEH,EAAAA,EAAA,KAAAG,EAAA,KAAA,GAEFZ,EAAA,8BAGAa,EAAA,QACEJ,EAAAA,EAAA,MAAAI,EAAA,KAAA,GAEFC,EAAA,QACEL,EAAAA,EAAA,KAAAK,EAAA,KAAA,GAEFC,EAAA,QACEN,EAAAA,EAAA,MAAAM,EAAA,KAAA,GAEFC,EAAA,QACEP,EAAAA,EAAA,KAAAO,EAAA,KAAA,GAEFf,EAAA,uFAOES,EAAA,MAKAD,EAAA,aAAAC,EAAA,KAAA,GAJE,QAAA,KAAA,4DAAA,EACA,QAAA,KAAA,sEAAA,oBAMN,GAEF,MAAA,CACE,UAAAO,SAEA,QAAAZ,oBAQF,MAAAa,EAAAC,YAIE,QAAAd,EACA,UAAAY,gBAIA,QAAAjB,gCAKA,OAAAC,EACA,KAAAC,sBAKA,QAAAF,gCAKA,OAAAC,EACA,KAAAC,sBAGA,GAAA,CAAAI,IAAAY,GAAA,MAAAA,EAAA,8DAGA,GAAAA,GAAA,MAAAA,EAAA,QAAAZ,GAAA,YAAAA,EAAA,SAAA,YAAA,GAAAc,EAAAd,GAAA,YAAAA,EAAA,OAAA,MAAAc,EAAA,SAAA,QACE,OAAAF,EAAA,MAAA,CAAA,MAAAnB,EAAA,GAAA,KAAA,MAAA,CAAA,mGAOJ,OAAAmB,GAAA,MAAAA,EAAA,QACEA,EAAA,QAAA,CAAA,KAAAZ,EAAA,QAAAD,EAAA,UAAAY,EAAA,MAAAlB,EAAA,GAAA,KAAA,MAAA,CAAA,GAEF,CAAAsB,EAAAC,IAAAC,EAAA,MAAA,KAAA,KAAA,UAAA,CAAA,QAAA,4CAAA,KAAAF,EAAA,KAAAC,CAAA,EAAA,KAAA,CAAA,CAAA,0CAEF,CACF,CAAA"}