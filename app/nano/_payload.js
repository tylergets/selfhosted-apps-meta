export default (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q){return {data:{nano:{_path:"\u002Fapps\u002Fnano",_dir:"apps",_draft:b,_partial:b,_locale:"en",id:c,name:c,description:f,icon:g,links:[{type:"docker",url:"https:\u002F\u002Fhub.docker.com\u002Fr\u002Flinuxserver\u002Fnano"},{type:"docs",url:"https:\u002F\u002Fdocs.linuxserver.io\u002Fimages\u002Fdocker-nano"}],containers:[{name:c,image:"linuxserver\u002Fnano",env:[{id:h,key:h,description:"User ID",default:i},{id:j,key:j,description:"Group ID",default:i},{id:k,default:l,description:m},{id:n,default:o,description:p},{id:q,default:r,description:s},{id:t,default:u,description:v},{id:w,default:x,description:y},{id:z,default:A,description:B},{id:C,default:D,description:E},{id:F,default:G,description:H}],volumes:[{container:I,description:J,key:"config"}],ports:[{container:d,description:K,protocol:e,web:b},{container:L,description:M,protocol:e,web:b},{container:N,description:O,protocol:e,web:b}]}],meta:{"readme-vars":{project_name:c,project_url:"https:\u002F\u002Fnano.org\u002F",project_logo:g,project_blurb:f,project_lsio_github_repo_url:"https:\u002F\u002Fgithub.com\u002Flinuxserver\u002Fdocker-{{ project_name }}",available_architectures:[{arch:"{{ arch_x86_64 }}",tag:"amd64-latest"},{arch:"{{ arch_arm64 }}",tag:"arm64v8-latest"}],development_versions:a,development_versions_items:[{tag:"latest",desc:"Stable Nano releases"},{tag:"beta",desc:"Beta Nano releases"}],param_container_name:"{{ project_name }}",param_usage_include_vols:a,param_volumes:[{vol_path:I,vol_host_path:"\u002Fpath\u002Fto\u002Fdata",desc:J}],param_usage_include_ports:a,param_ports:[{external_port:d,internal_port:d,port_desc:K},{external_port:"7076",internal_port:L,port_desc:M},{external_port:"7077",internal_port:N,port_desc:O}],param_usage_include_env:a,param_env_vars:[{env_var:k,env_value:l,desc:m}],opt_param_usage_include_env:a,opt_param_env_vars:[{env_var:n,env_value:o,desc:p},{env_var:q,env_value:r,desc:s},{env_var:t,env_value:u,desc:v},{env_var:w,env_value:x,desc:y},{env_var:z,env_value:A,desc:B},{env_var:C,env_value:D,desc:E},{env_var:F,env_value:G,desc:H}],app_setup_block_enabled:a,app_setup_block:P,changelogs:[{date:"02.06.20:",desc:"Rebase to Alpine 3.12."},{date:"28.05.20:",desc:"Add beta tag."},{date:"17.05.20:",desc:"Initial Release."}]}},setup:P,_id:"content:apps:nano.json",_type:Q,title:"Nano",_source:"content",_file:"apps\u002Fnano.json",_extension:Q}},prerenderedAt:1675118189762}}(true,false,"nano","8075","tcp","[{{ project_name|capitalize }}]({{ project_url }}) is a digital payment protocol designed to be accessible and lightweight, with a focus on removing inefficiencies present in other cryptocurrencies. With ultrafast transactions and zero fees on a secure, green and decentralized network, this makes Nano ideal for everyday transactions.\n","https:\u002F\u002Fupload.wikimedia.org\u002Fwikipedia\u002Fcommons\u002Fthumb\u002F1\u002F18\u002FNano_logo.png\u002F640px-Nano_logo.png","PUID","100","PGID","TZ","Europe\u002FLondon","Specify a timezone to use EG Europe\u002FLondon","PEER_HOST","localhost","Default peer host (can be overidden with an array by command line options)","LIVE_GENESIS_PUB","GENESIS_PUBLIC","Genesis block public key","LIVE_GENESIS_ACCOUNT","nano_xxxxxx","Genesis block account","LIVE_GENESIS_WORK","WORK_FOR_BLOCK","Genesis block proof of work","LIVE_GENESIS_SIG","BLOCK_SIGNATURE","Genesis block signature","CLI_OPTIONS","--config node.enable_voting=true","Node run command cli args","LMDB_BOOTSTRAP_URL","http:\u002F\u002Fexample.com\u002FNano_64_version_20.7z","HTTP\u002FHTTPS endpoint to download a 7z file with the data.ldb to bootstrap to this node","\u002Fconfig","Main storage for config and blockchain","Nano communication port","3000","RPC interface filtered through a proxy","3001","Https RPC interface filtered through a proxy","### Your Genesis account\nBy default this container will launch with a genesis block based on the private key `0000000000000000000000000000000000000000000000000000000000000000`, this should obviously only ever be used for testing purposes. Before you run your node you should use a script baked into this image to determine your private key and required environment variables: \n\n```\ndocker run --rm --entrypoint \u002Fgenesis.sh linuxserver\u002Fnano\nGenerating Genesis block\n!!!!!!! ACCOUNT INFO SAVE THIS INFORMATION IT WILL NOT BE SHOWN AGAIN !!!!!!!!\nPrivate Key: CD4CD6B1E5523D4B5AEDD2B1E5A447C6C6797E729A531A95F9AD7937FC7CD9EA\nPublic Key:  2D057DF2EB09E918D3F95B5FCA69A5FD3EA406EF7D1810106324CD7A99FAA32D\nAccount:     nano_1da7hqsgp4hb55bzkptzsbntdzbyni5gyzar41a88b8fhcezoasfjkgmyk5y\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\nContainer Environment Values:\n -e LIVE_GENESIS_PUB=2D057DF2EB09E918D3F95B5FCA69A5FD3EA406EF7D1810106324CD7A99FAA32D \\\n -e LIVE_GENESIS_ACCOUNT=nano_1da7hqsgp4hb55bzkptzsbntdzbyni5gyzar41a88b8fhcezoasfjkgmyk5y \\\n -e LIVE_GENESIS_WORK=7fd88e48684600b7 \\\n -e LIVE_GENESIS_SIG=D1DF3A64BB43C131944401632215569A40AAE858ACF6CB59D5C77070E69DBF6435D93807877628A8B142DBF1AC4C562CD2F4CEBEB7D15486BDB7494A6146E007 \\\n```\n\nThese environment variables will be used for all of the peers in your payment network, but if you are running what you would consider a public or live network never share your private key even if you have drained the funds from that account it can be potentionally used to create valid forks.\n**Even Better**, you should never even trust our Docker image for generating a private key and open block. Do it on an airgapped machine and keep it on a paper wallet.\n\n### RPC Proxy settings\nBy default this container will enable RPC control and publish a custom service that acts as an RPC firewall giving you the ability to whitelist specific RPC calls and overide\u002Fadd default values.\n\nThe default proxy config is stored in `\u002Fconfig\u002Frpc-proxy.json`: \n\n```\n{\n  \"port\":3000,\n  \"httpsport\":3001,\n  \"rpchost\":\"127.0.0.1\",\n  \"rpcport\":7076,\n  \"certfile\":\"\u002Fconfig\u002Fssl\u002Fcert.crt\",\n  \"keyfile\":\"\u002Fconfig\u002Fssl\u002Fcert.key\",\n  \"whitelist\":[\n    \"account_info\",\n    \"account_history\",\n    \"block_count\",\n    \"block_info\",\n    \"pending\",\n    \"process\"\n  ],\n  \"overrides\":{\n    \"account-history\":{\n      \"count\":\"64\"\n    },\n    \"pending\":{\n      \"count\":\"8\"\n    }\n  }\n}\n```\n\nThis should be a minimal amount of RPC access needed to run a local light wallet against this endpoint. If you plan on having your network users only run clientside light wallets (local blake2b block generation and block `process` call publishing) you should publically publish this port for access for both port 7076 and 7077. For functional light wallets on Https endpoints we will generate a self signed cert\u002Fkey combo but you should add the ones associated with your domain. This will allow yours and other https hosted light wallets to hit your RPC endpoint clientside from the users web browser.\n\nOutside of potential https tunneling and actual object parsing (will remove duplicate keys) this is not a conventional API, it simply acts as a firewall and will send and return data just like a local RPC server would. The goal is to be compatible with any existing Nano software if the developers decide to add the ability to connect to alternative network endpoints. \n\n**Our Proxy has not been audited by any security team and is provided as is, though we make the best effort to keep it simple and secure**\n\n### Node configuration via environment\nBefore you get started please review the configuration docs [here](https:\u002F\u002Fdocs.nano.org\u002Frunning-a-node\u002Fconfiguration\u002F)\n\nWe will pass the `CLI_OPTIONS` to the node, here is a run command example:\n\n```\n-e CLI_OPTIONS='--config node.preconfigured_peers=[\"peering.yourhost.com\",\"peering.yourhost2.com\"] \\\n                --config node.enable_voting=true'\n```\n\nThere are many options to know here to run an actual live node especially peering and voting, again please review the docs if you plan to run something outside of a local setup.\n\n### Quickstart Guide\n\nHere we are going to cover the bare minimum commands needed to spinup a local payment network and wallet. \n\nFirst spinup your containers:\n```\ndocker run -d \\\n--name node \\\n-e CLI_OPTIONS='--config node.enable_voting=true' \\\n-p 7076:3000 \\\n--restart unless-stopped \\\nlinuxserver\u002Fnano\n```\n```\ndocker run -d \\\n--name=wallet \\\n-p 80:80 \\\n--restart unless-stopped \\\nlinuxserver\u002Fnano-wallet\n```\nThen unlock the Genesis funds on the local node to allow it to confirm transactions: \n```\ndocker exec -it node bash\nroot@f1df092971f0:\u002F# curl -d '{ \"action\": \"wallet_create\" }' localhost:7076\n{\n    \"wallet\": \"A3D63F1B28AC68BCD9E0FF74278C7984A36841C803EF1A81DF92BCD6E3BB18F9\"\n}\nroot@f1df092971f0:\u002F# curl -d '{ \"action\": \"wallet_add\", \"wallet\": \"A3D63F1B28AC68BCD9E0FF74278C7984A36841C803EF1A81DF92BCD6E3BB18F9\", \"key\": \"0000000000000000000000000000000000000000000000000000000000000000\" }' localhost:7076\n{\n    \"account\": \"nano_18gmu6engqhgtjnppqam181o5nfhj4sdtgyhy36dan3jr9spt84rzwmktafc\"\n}\n```\n\nHere we are using the default private key of `0000000000000000000000000000000000000000000000000000000000000000` for the image.\nNavigate to http:\u002F\u002Flocalhost\u002F#\u002Flocalhost and enter this key. You should be greeted by the genesis account wallet with 340.28 Million Nano.\n\nFrom here you can generate new wallets from the home screen and send\u002Freceive funds on your local network. Now you will be running an insecure centralized network with a single voting representative and a zero security private key using the commands above. To spinup a standard private or even public network you should read up on Nano's documentation [HERE](https:\u002F\u002Fdocs.nano.org\u002F) and continue reading the network design section below.\n\n### Network design\nThere are 4 main concepts to grasp from a network standpoint as far as types of endpoints. Before we get started here is a basic network diagram:\n\n![image](https:\u002F\u002Fraw.githubusercontent.com\u002Flinuxserver\u002Fimage-docs\u002Fmaster\u002Fimg\u002Fnano-network.png)\n\n#### Principle nodes and voting representatives\nPrinciple nodes are network representatives with the ability to vote due to having a certain threshold of funds unlocked on that node or pointed to that unlocked address. These nodes should be as airgapped as possible while still being an active 24\u002F7 peer of the network. From a tecnical perspective this is a node with an account private key that either has the funds it needs itself or enough users have pointed their accounts to it as a representative. In a live and secure configuration to protect the funds of this account you would use an inactive private key account with the funds in it and locally sign a change of representative block to point to the always online representative.\n\nThese nodes should never process external RPC calls even on a local network, the same rules go for any node with a local unlocked wallet.\n\nKeep in mind the key to the security of the network is that 51% of the funds are pointed to trusted representatives that will generally not argue about chain forks. \n\nIn most deployments the best bet is to heavily centralize your voting nodes, this is unless you are intentionally trying to build a distributed ledger and security model like the main Nano live net. Achieving that will be a long and difficult task.\n\n#### Network peers\n\nTo a normal user simply transacting on the network using off the shelf tools like a web wallet and web based block explorers is generally all that is required. They get a number in a ledger somewhere and are able to locally sign and publish blocks using their private key using your published RPC endpoints.\n\nFor advanced users and just to generally make the network more robust, network operators should promote people running their own nodes. Using this image a network peer simply needs to run a docker run command with your pre-configured variables. IE given the generation example from above in the `Your Genesis account` section:\n\n```\ndocker create \\\n  --name=nano \\\n  -e PUID=1000 \\\n  -e PGID=1000 \\\n  -e TZ=Europe\u002FLondon \\\n  -e PEER_HOST=peering.mydomain.com \\\n  -e LIVE_GENESIS_PUB=2D057DF2EB09E918D3F95B5FCA69A5FD3EA406EF7D1810106324CD7A99FAA32D \\\n  -e LIVE_GENESIS_ACCOUNT=nano_1da7hqsgp4hb55bzkptzsbntdzbyni5gyzar41a88b8fhcezoasfjkgmyk5y \\\n  -e LIVE_GENESIS_WORK=7fd88e48684600b7 \\\n  -e LIVE_GENESIS_SIG=D1DF3A64BB43C131944401632215569A40AAE858ACF6CB59D5C77070E69DBF6435D93807877628A8B142DBF1AC4C562CD2F4CEBEB7D15486BDB7494A6146E007 \\\n  -p 8075:8075 \\\n  -p 7076:3000 \\\n  -p 7077:3001 \\\n  -v \u002Fpath\u002Fto\u002Fdata:\u002Fconfig \\\n  --restart unless-stopped \\\n  linuxserver\u002Fnano\n```\n\nWhen the container spins up it will reach out to the node to bootstrap it's local ledger from peering.mydomain.com . This node once fully synced will be able to run local RPC commands to plug into a wallet and default Nano node wallet commands for automated pocketing of transactions etc. It will also get a list of other peers on the network from it's initial network peering and start participating in your distributed cryptocurrency network.\n\n#### Public RPC endpoints\nThe key to users going to a webpage and managing the funds on your network is the ability to get blockchain information and publish new blocks to theirs. As mentioned earlier we bundle a basic firewall with a core set of RPC functions whitelisted that should be safe to expose publically. \n\nFrom a network design perspective these nodes should be purely what you would consider client peers and never have any wallets registered or private keys stored on them. Also for redundancy optmimally these peers should be run in a cluster behind a load balancer. For standard nodes you are building out a large P2P network, but in the case of the RPC endpoint and specifically the URL the end user is going to pass when accessing their wallet it is up to you to make that resilient.\n\n#### Clientside javascript wallet\nCurrently we publish a pure javascript clientside wallet located here:  \n\nhttps:\u002F\u002Fgithub.com\u002Flinuxserver\u002Fnano-wallet\n\nIt is designed to be run 100% clientside in any web browser and use public RPC endpoints to hook into any network and conduct transactions by locally signing then publishing the result.\nThis can be hosted locally with any simple webserver and pointed to a locally run peer, but for full functionality we reccomend providing a public Https URL with these files along with plugging in legitamite SSL certificates into your RPC endpoints running on 7077.\n\n# Running a node on the LinuxServer network\n\nWe maintain our own network which users can get funds to transact on from our [Discord](https:\u002F\u002Fdiscord.gg\u002FYWrKVTn) server. If you would like to run a node on our network here is our Docker run command:\n```\ndocker create \\\n  --name=lsio-node \\\n  -e PUID=1000 \\\n  -e PGID=1000 \\\n  -e TZ=Europe\u002FLondon \\\n  -e PEER_HOST=peering.linuxserver.io \\\n  -e LIVE_GENESIS_PUB=79F2E157B5667F1C8B6CCB6DF691DAC032B85DEC39E231D29976DCED05F5B1BE \\\n  -e LIVE_GENESIS_ACCOUNT=nano_1yhkw7ducsmz5k7pskufytaxoi3kq3gyrgh489bbkxpwxn4zdefyn4rmrrkk \\\n  -e LIVE_GENESIS_WORK=c51204c6b69384cb \\\n  -e LIVE_GENESIS_SIG=90DDE7B4DC038811180FF5DDE8594F1774542A7AADE3DB71A57AA38A5AED42672E1E8D7ACFAC315BDB0EB5DCB542C610B9C49B2560AE575073855259AF065509 \\\n  -p 8075:8075 \\\n  -p 7076:3000 \\\n  -p 7077:3001 \\\n  -v \u002Fpath\u002Fto\u002Fdata:\u002Fconfig \\\n  --restart unless-stopped \\\n  linuxserver\u002Fnano\n```\n","json"))