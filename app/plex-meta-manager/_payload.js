export default (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B){return {data:{"plex-meta-manager":{_path:"\u002Fapps\u002Fplex-meta-manager",_dir:"apps",_draft:a,_partial:a,_locale:"en",id:d,name:d,description:e,icon:f,links:[{type:"docker",url:"https:\u002F\u002Fhub.docker.com\u002Fr\u002Flinuxserver\u002Fplex-meta-manager"},{type:"docs",url:"https:\u002F\u002Fdocs.linuxserver.io\u002Fimages\u002Fdocker-plex-meta-manager"}],containers:[{name:d,image:"linuxserver\u002Fplex-meta-manager",env:[{id:g,key:g,description:"User ID",default:h},{id:i,key:i,description:"Group ID",default:h},{id:j,default:k,description:l},{id:m,default:n,description:o},{id:p,default:q,description:r},{id:s,default:b,description:t},{id:u,default:b,description:v},{id:w,default:b,description:x}],volumes:[{container:y,description:z,key:"config"}]}],meta:{"readme-vars":{project_name:d,project_url:"https:\u002F\u002Fgithub.com\u002Fmeisnate12\u002FPlex-Meta-Manager",project_logo:f,project_blurb:e,project_lsio_github_repo_url:"https:\u002F\u002Fgithub.com\u002Flinuxserver\u002Fdocker-{{ project_name }}",project_blurb_optional_extras_enabled:a,available_architectures:[{arch:"{{ arch_x86_64 }}",tag:"amd64-latest"},{arch:"{{ arch_arm64 }}",tag:"arm64v8-latest"},{arch:"{{ arch_armhf }}",tag:"arm32v7-latest"}],development_versions:c,development_versions_items:[{tag:"latest",desc:"Stable releases."},{tag:"develop",desc:"Latest commits from the develop branch"}],common_param_env_vars_enabled:c,param_container_name:"{{ project_name }}",param_usage_include_net:a,param_usage_include_env:c,param_env_vars:[{env_var:j,env_value:k,desc:l}],param_usage_include_vols:c,param_volumes:[{vol_path:y,vol_host_path:"\u002Fpath\u002Fto\u002Fappdata\u002Fconfig",desc:z}],param_usage_include_ports:a,param_device_map:a,cap_add_param:a,opt_param_usage_include_env:c,opt_param_env_vars:[{env_var:m,env_value:n,desc:o},{env_var:p,env_value:q,desc:r},{env_var:s,env_value:b,desc:t},{env_var:u,env_value:b,desc:v},{env_var:w,env_value:b,desc:x}],opt_param_usage_include_vols:a,opt_param_usage_include_ports:a,opt_param_device_map:a,opt_cap_add_param:a,optional_block_1:a,app_setup_block_enabled:c,app_setup_block:A,changelogs:[{date:"11.12.22:",desc:"Rebase master to Alpine 3.17."},{date:"08.11.22:",desc:"Add develop branch."},{date:"25.10.22:",desc:"Support commandline args and relative paths."},{date:"03.10.22:",desc:"Rebase to Alpine 3.16, migrate to s6v3."},{date:"30.01.22:",desc:"Initial Release."}]}},setup:A,_id:"content:apps:plex-meta-manager.json",_type:B,title:"Plex Meta Manager",_source:"content",_file:"apps\u002Fplex-meta-manager.json",_extension:B}},prerenderedAt:1676483555732}}(false,"False",true,"plex-meta-manager","[{{ project_name|capitalize }}]({{ project_url }}) is a Python 3 script that can be continuously run using YAML configuration files to update on a schedule the metadata of the movies, shows, and collections in your libraries as well as automatically build collections based on various methods all detailed in the wiki.","https:\u002F\u002Fraw.githubusercontent.com\u002Flinuxserver\u002Fdocker-templates\u002Fmaster\u002Flinuxserver.io\u002Fimg\u002Fplex-meta-manager-banner.png","PUID","100","PGID","TZ","Europe\u002FLondon","Specify a timezone to use EG Europe\u002FLondon.","PMM_CONFIG","\u002Fconfig\u002Fconfig.yml","Specify a custom config file to use.","PMM_TIME","03:00","Comma-separated list of times to update each day. Format: `HH:MM`.","PMM_RUN","Set to `True` to run without the scheduler.","PMM_TEST","Set to `True` to run in debug mode with only collections that have `test: true`.","PMM_NO_MISSING","Set to `True` to run without any of the missing movie\u002Fshow functions.","\u002Fconfig","Local path for plex-meta-manager config files.","There is a [walkthrough](https:\u002F\u002Fmetamanager.wiki\u002Fen\u002Flatest\u002Fhome\u002Fguides\u002Fdocker.html#setting-up-the-initial-config-file) available to help get you up and running.\n\nThis image supports all of the environment variables listed [here](https:\u002F\u002Fmetamanager.wiki\u002Fen\u002Flatest\u002Fhome\u002Fenvironmental.html) and all commandline arguments.\n\nTo perform a one-time run use `docker run` (or `docker-compose run`) with the `--rm` and `-e PMM_RUN=True` arguments. This will cause the container to process your config immediately instead of waiting for the scheduled time, and delete the old container after completion.\n\nFor more information see the [official wiki](https:\u002F\u002Fmetamanager.wiki).\n","json"))