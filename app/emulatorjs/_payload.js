export default (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z){return {data:{emulatorjs:{_path:"\u002Fapps\u002Femulatorjs",_dir:"apps",_draft:b,_partial:b,_locale:"en",id:c,name:c,description:f,icon:g,links:[{type:"docker",url:"https:\u002F\u002Fhub.docker.com\u002Fr\u002Flinuxserver\u002Femulatorjs"},{type:"docs",url:"https:\u002F\u002Fdocs.linuxserver.io\u002Fimages\u002Fdocker-emulatorjs"}],containers:[{name:c,image:"linuxserver\u002Femulatorjs",env:[{id:h,key:h,description:"User ID",default:i},{id:j,key:j,description:"Group ID",default:i},{id:k,default:l,description:m},{id:n,default:o,description:p}],volumes:[{container:q,description:r,key:"config"},{container:s,description:t}],ports:[{container:d,description:u,protocol:v,web:b},{container:e,description:w,protocol:v,web:b}]}],meta:{"readme-vars":{project_name:c,project_url:"https:\u002F\u002Fgithub.com\u002Flinuxserver\u002Femulatorjs",project_logo:g,project_blurb:f,project_lsio_github_repo_url:"https:\u002F\u002Fgithub.com\u002Flinuxserver\u002Fdocker-{{ project_name }}",available_architectures:[{arch:"{{ arch_x86_64 }}",tag:"amd64-latest"},{arch:"{{ arch_arm64 }}",tag:"arm64v8-latest"},{arch:"{{ arch_armhf }}",tag:"arm32v7-latest"}],param_container_name:"{{ project_name }}",param_usage_include_vols:a,param_volumes:[{vol_path:q,vol_host_path:"\u002Fpath\u002Fto\u002Fconfig",desc:r},{vol_path:s,vol_host_path:"\u002Fpath\u002Fto\u002Fdata",desc:t}],param_usage_include_ports:a,param_ports:[{external_port:d,internal_port:d,port_desc:u},{external_port:e,internal_port:e,port_desc:w}],param_usage_include_env:a,param_env_vars:[{env_var:k,env_value:l,desc:m}],opt_param_usage_include_ports:a,opt_param_ports:[{external_port:x,internal_port:x,port_desc:"IPFS peering port, if you want to participate in the P2P network to distribute frontend artwork please forward this to the Internet"}],opt_param_usage_include_env:a,opt_param_env_vars:[{env_var:n,env_value:o,desc:p}],app_setup_block_enabled:a,app_setup_block:y,changelogs:[{date:"24.11.22:",desc:"Update IPFS links for chdman."},{date:"04.04.22:",desc:"Ingest pre-built chdman bins during build time."},{date:"23.02.22:",desc:"Update ingestion point for emulatorjs bins."},{date:"25.01.22:",desc:"Allow users to mount in existing rom directories."},{date:"14.01.22:",desc:"Add profile paths and rebase to Alpine 3.15."},{date:"04.01.22:",desc:"Add headers needed for Threaded emulators."},{date:"29.11.21:",desc:"Add wasm mime type to NGINX."},{date:"26.11.21:",desc:"Configure IPFS in a lower power mode, use homebuilt blobs for emu cores."},{date:"19.11.21:",desc:"Pin retroarch version."},{date:"14.11.21:",desc:"Update default cores to ingest."},{date:"23.10.21:",desc:"Initial release."}]}},setup:y,_id:"content:apps:emulatorjs.json",_type:z,title:"Emulatorjs",_source:"content",_file:"apps\u002Femulatorjs.json",_extension:z}},prerenderedAt:1676483555120}}(true,false,"emulatorjs","3000","80","[{{ project_name|capitalize }}]({{ project_url }}) - In browser web based emulation portable to nearly any device for many retro consoles. A mix of emulators is used between Libretro and EmulatorJS.\n","https:\u002F\u002Fraw.githubusercontent.com\u002Flinuxserver\u002Fdocker-templates\u002Fmaster\u002Flinuxserver.io\u002Fimg\u002Femulatorjs-logo.png","PUID","100","PGID","TZ","Europe\u002FLondon","Specify a timezone to use EG Europe\u002FLondon","SUBFOLDER","\u002F","Specify a subfolder for reverse proxies IE '\u002FFOLDER\u002F'","\u002Fconfig","Path to store user profiles","\u002Fdata","Path to store roms\u002Fartwork","Rom\u002Fartwork management interface, used to generate\u002Fmanage config files and download artwork","tcp","Emulation frontend containing static web files used to browse and launch games","4001","The Backend can be accessed at:\n\n* http:\u002F\u002Fyourhost:3000\u002F\n\nThe first thing you will need to do is click to download the default art\u002Fconfigs from this interface, this will setup a skeleton directory in your `\u002Fdata` mount. From there add roms to the respective `roms` directories and follow the on screen instructions to add them to your web frontend running on port 80.\n\nThe frontend application has been initially optimized around being used with a standard gamepad (more specifically for modern Xbox consoles that have chromium based Edge browsers). The navigation revolves around the up\u002Fdown\u002Fleft\u002Fright keys to browse the menus and launch games.\nMobile browsers will function, just keep in mind compatibility will be reduced especially for CD based games.\n\n**It is important to note that some of the current emulators used for this frontend are obfuscated code, efforts are being made to [reverse engineer it](https:\u002F\u002Fgithub.com\u002Fethanaobrien\u002Femulatorjs\u002F) but you should know it can potentially reach out to third party services if you manually enable features like netplay (this should never happen in a stock setup). The point of this message is that on top of the de-obfuscation effort there is also effort to stop using binary blobs and shift to built from source libretro emscripten blobs, for now this web based emulation stack is the best for useability and compatibility. We are in the process to transitioning to libretro cores for emulators, currently 27\u002F30 emulators have been replaced.**\n\n**For Xbox users please click the select button a couple times after launching a game to ensure the B button does not trigger a \"back\" action in the browser. (official name \"view button\" it is the two small squares) Exiting the controller mode and back to browser controls can be triggered by holding the start button for 3 seconds. (official name \"menu button\" the three lines) You will be unable to use features like save states and modify controller layouts on the emulatorjs based emulators currently as I have not determined a methodology of re-entering controller mode once you exit it. All normal game saves will function given you exit the game play screen cleanly using the B button for back this includes multi disc games for psx. Your game saves are stored in browser storage by hostname so if you make any changes to your local hosted setup (port or IP) the saves will not follow with it. For libretro based emulators you can use the button combination start+select+L+R to access the libretro menu and change settings\u002Fsave or load\u002Fetc.**\n\n**We know about most of the oddities like crackling sound for some emulators, rendering issues, and games unreliably auto launching to fullscreen. In general full CD games on the Xbox web browser do not seem to work due to their size if you have a chd\u002Fpbp less than 450 megs it will run. Edge on Xbox has some kind of undocumented ram limitation of about a gigabyte. Until all emulators are transitioned to libretro cores the oddities of using self hosted EmulatorJS will not be something that can or should be solved using hacky workarounds interacting with obfuscated code. Just keep in mind these are full blown machine emulators running in Javascript in a browser, do not expect bare metal performance.**\n\nMounting in existing rom directories can be achieved by pointing to the default folder structure, IE lets say you would like to mount your NES library:\n\n`-v \u002Fpath\u002Fto\u002Fnes\u002Froms:\u002Fdata\u002Fnes\u002Froms`\n\nThe folder names are:\n* 3do\n* arcade\n* atari2600\n* atari7800\n* colecovision\n* doom\n* gb\n* gba\n* gbc\n* jaguar\n* lynx\n* msx\n* n64\n* nds\n* nes\n* ngp\n* odyssey2\n* pce\n* psx\n* sega32x\n* segaCD\n* segaGG\n* segaMD\n* segaMS\n* segaSaturn\n* segaSG\n* snes\n* vb\n* vectrex\n* ws\n","json"))