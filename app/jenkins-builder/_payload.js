export default (function(a,b,c,d,e,f){return {data:{"jenkins-builder":{_path:"\u002Fapps\u002Fjenkins-builder",_dir:"apps",_draft:b,_partial:b,_locale:"en",id:a,name:a,icon:"https:\u002F\u002Fraw.githubusercontent.com\u002Fwalkxcode\u002Fdashboard-icons\u002Fmain\u002Fpng\u002Fjenkinsbuilder.png",links:[{type:"docker",url:"https:\u002F\u002Fhub.docker.com\u002Fr\u002Flinuxserver\u002Fjenkins-builder"},{type:"docs",url:"https:\u002F\u002Fdocs.linuxserver.io\u002Fimages\u002Fdocker-jenkins-builder"}],containers:[{name:a,image:"linuxserver\u002Fjenkins-builder",env:[{id:c,key:c,description:"User ID",default:d},{id:e,key:e,description:"Group ID",default:d}]}],meta:{"readme-vars":{project_name:a,full_custom_readme:"{% raw -%}\n# linuxserver\u002Fjenkins-builder\n\nExpects to run as part of the LSIO CI process. Not for public consumption.\n\n## Running against remote project\n\n```bash\ndocker run --rm \\\n  -e CONTAINER_NAME=${CONTAINER_NAME} \\\n  -v ${TEMPDIR}:\u002Fansible\u002Fjenkins \\\n  lscr.io\u002Flinuxserver\u002Fjenkins-builder:latest\n```\n\n## Running against local project\n\nIf you need to test functionality just navigate to the folder with the jenkins-vars.yml and run:\n\n```bash\ndocker pull lscr.io\u002Flinuxserver\u002Fjenkins-builder:latest && \\\ndocker run --rm \\\n  -v $(pwd):\u002Ftmp \\\n  -e LOCAL=true \\\n  -e PUID=$(id -u) -e PGID=$(id -g) \\\n  lscr.io\u002Flinuxserver\u002Fjenkins-builder:latest && \\\nrm -rf .jenkins-external\n```\n\nNewly generated files (including `README.md`, `Jenkinsfile`, issue templates, etc.) will overwrite the existing files in your current working directory.\n\n## Building locally\n\nIf you want to make local modifications to these images for development purposes or just to customize the logic:\n\n```bash\ngit clone https:\u002F\u002Fgithub.com\u002Flinuxserver\u002Fdocker-jenkins-builder.git\ncd docker-jenkins-builder\ndocker build \\\n  --no-cache \\\n  --pull \\\n  -t lscr.io\u002Flinuxserver\u002Fjenkins-builder:latest .\n```\n\nThe ARM variants can be built on x86_64 hardware using `multiarch\u002Fqemu-user-static`\n\n```bash\ndocker run --rm --privileged multiarch\u002Fqemu-user-static:register --reset\n```\n\nOnce registered you can define the dockerfile to use with `-f Dockerfile.aarch64`.\n\n## Versions\n\nThe following line is only in this repo for loop testing:\n\n- { date: \"01.01.50:\", desc: \"I am the release message for this internal repo.\" }\n{%- endraw %}\n"}},_id:"content:apps:jenkins-builder.json",_type:f,title:"Jenkins Builder",_source:"content",_file:"apps\u002Fjenkins-builder.json",_extension:f}},prerenderedAt:1675118189588}}("jenkins-builder",false,"PUID","100","PGID","json"))