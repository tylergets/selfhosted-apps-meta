export default (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r){return {data:{limnoria:{_path:"\u002Fapps\u002Flimnoria",_dir:"apps",_draft:a,_partial:a,_locale:"en",id:d,name:d,description:f,icon:g,links:[{type:"docker",url:"https:\u002F\u002Fhub.docker.com\u002Fr\u002Flinuxserver\u002Flimnoria"},{type:"docs",url:"https:\u002F\u002Fdocs.linuxserver.io\u002Fimages\u002Fdocker-limnoria"}],containers:[{name:d,image:"linuxserver\u002Flimnoria",env:[{id:h,key:h,description:"User ID",default:i},{id:j,key:j,description:"Group ID",default:i},{id:k,default:l,description:m}],volumes:[{container:n,description:o,key:"config"}],ports:[{container:e,description:p,protocol:"tcp",web:a}]}],meta:{"readme-vars":{project_name:d,project_url:"https:\u002F\u002Fgithub.com\u002FProgVal\u002Flimnoria",project_logo:g,project_blurb:f,project_lsio_github_repo_url:"https:\u002F\u002Fgithub.com\u002Flinuxserver\u002Fdocker-{{ project_name }}",project_blurb_optional_extras_enabled:a,project_blurb_optional_extras:[],available_architectures:[{arch:"{{ arch_x86_64 }}",tag:"amd64-latest"},{arch:"{{ arch_arm64 }}",tag:"arm64v8-latest"},{arch:"{{ arch_armhf }}",tag:"arm32v7-latest"}],development_versions:a,development_versions_items:b,common_param_env_vars_enabled:c,param_container_name:"{{ project_name }}",param_usage_include_net:a,param_usage_include_env:c,param_env_vars:[{env_var:k,env_value:l,desc:m}],param_usage_include_vols:c,param_volumes:[{vol_path:n,vol_host_path:"path\u002Fto\u002Fconfig",desc:o}],param_usage_include_ports:c,param_ports:[{external_port:e,internal_port:e,port_desc:p}],opt_param_usage_include_env:a,opt_param_env_vars:b,opt_param_usage_include_vols:a,opt_param_volumes:b,opt_param_usage_include_ports:a,opt_param_ports:b,opt_param_device_map:a,opt_param_devices:b,opt_cap_add_param:a,opt_cap_add_param_vars:b,optional_block_1:a,optional_block_1_items:"",app_setup_block_enabled:c,app_setup_block:q,changelogs:[{date:"22.12.22:",desc:"Rebase to alpine 3.17."},{date:"19.09.22:",desc:"Rebase to alpine 3.15."},{date:"25.05.21:",desc:"Install plugin requirements on container init."},{date:"17.05.21:",desc:"Add linuxserver wheel index."},{date:"13.02.21:",desc:"Rebasing to alpine 3.13."},{date:"01.06.20:",desc:"Rebasing to alpine 3.12."},{date:"13.01.20:",desc:"Initial Release."}]}},setup:q,_id:"content:apps:limnoria.json",_type:r,title:"Limnoria",_source:"content",_file:"apps\u002Flimnoria.json",_extension:r}},prerenderedAt:1675118189658}}(false,null,true,"limnoria","8080","[{{ project_name|capitalize }}]({{ project_url }}) A robust, full-featured, and user\u002Fprogrammer-friendly Python IRC bot, with many existing plugins. Successor of the well-known Supybot.","https:\u002F\u002Fraw.githubusercontent.com\u002Flinuxserver\u002Fdocker-limnoria\u002Fmaster\u002Flogo.png","PUID","100","PGID","TZ","Europe\u002FLondon","Specify a timezone to use EG Europe\u002FLondon.","\u002Fconfig","Where Limnoria config is stored.","Port for Limnoria's web interface.","### New Configuration\n\nIf you do not have an existing config you will need to start the container and then run the following wizard command:\n\n`docker exec -it -w \u002Fconfig -u abc limnoria limnoria-wizard`\n\n### Existing Configuration\n\nIf you have an existing config, adjust the directory settings in your conf file as follows:\n\n```conf\nsupybot.directories.backup: \u002Fconfig\u002Fbackup\nsupybot.directories.conf: \u002Fconfig\u002Fconf\nsupybot.directories.data: \u002Fconfig\u002Fdata\nsupybot.directories.data.tmp: \u002Fconfig\u002Fdata\u002Ftmp\nsupybot.directories.data.web: \u002Fconfig\u002Fweb\nsupybot.directories.log: \u002Fconfig\u002Flogs\nsupybot.directories.plugins: \u002Fconfig\u002Fplugins\n```\n\nNOTE: These are not grouped together in the file. You will need to search your conf file for the variables.\n\nThen place your conf file and any of your existing directories in \u002Fconfig and start up the container.\n\n### Plugin Requirements\n\nThe container will pip install any requirements.txt it finds in the \u002Fconfig\u002Fplugins folder on startup.\n\nIf you install a plugin using the PluginDownloader that includes a requirements.txt you can \nexecute a shell into the container and then use `pip install \u002Fconfig\u002Fplugins\u002FThePlugin\u002Frequirements.txt`\nor restart the container and the requirements will be installed. \n","json"))